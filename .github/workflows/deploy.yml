# Nombre del workflow, aparecerá en la pestaña "Actions" de GitHub
name: Desplegar en Servidor

# Define cuándo se ejecutará este workflow
on:
  push:
    # Solo en pushes a la rama 'main'
    branches:
      - main

# Define los trabajos (jobs) que se ejecutarán
jobs:
  deploy:
    # El nombre del trabajo
    name: Desplegar Proyecto
    # El tipo de máquina virtual donde se ejecutará
    runs-on: ubuntu-latest

    # Los pasos que se ejecutarán en secuencia
    steps:
      # 1. Configurar la clave SSH para acceder al servidor
      - name: Configurar SSH
        run: |
          # Añadir la clave privada al agente SSH
          echo "${{ secrets.SSH_PRIVATE_KEY }}" 
          chmod 600 private_key
          ssh-add private_key

      # 2. Ejecutar los comandos de despliegue en el servidor remoto
      - name: Conectar y Desplegar
        run: |
          # Añadir la huella del servidor a known_hosts para evitar prompts interactivos
          ssh-keyscan -H -p 1233 146.83.198.35 >> ~/.ssh/known_hosts

          # Conectarse vía SSH y ejecutar el script de despliegue.
          # Forzamos el uso de 'bash' para que el script sea predecible.
          ssh njimenez@146.83.198.35 -p 1233 bash << 'EOSSH'
            # --- Inicio del script en el servidor remoto ---
            set -e # Salir inmediatamente si un comando falla

            echo "Conectado al servidor como $(whoami)"

            # Configurar FNM para esta sesión
            echo "Configurando FNM..."
            eval "$(fnm env --shell=bash)"
            echo "Versión de Node activa: $(node --version)"

            # Ir al directorio del proyecto
            echo "Navegando a /LibroConecta"
            cd /LibroConecta

            # Detener la aplicación actual para evitar conflictos
            echo "Deteniendo la aplicación con PM2..."
            # Usamos la ruta completa en sudoers, por lo que 'sudo pm2' debería funcionar
            sudo pm2 stop 0 || echo "Proceso 0 ya estaba detenido."

            # Actualizar el código desde la rama main de GitHub
            echo "Actualizando el código con git pull..."
            git pull origin main

            # Navegar a la carpeta del frontend
            echo "Navegando a la carpeta frontend..."
            cd frontend

            # Instalar dependencias (npm ci es más rápido y seguro para CI/CD)
            echo "Instalando dependencias del frontend..."
            npm ci

            # Construir el proyecto de frontend
            echo "Construyendo el frontend..."
            npm run build

            # Reiniciar la aplicación con PM2
            # 'restart' es mejor que 'start' porque maneja si ya estaba corriendo o no
            echo "Reiniciando la aplicación con PM2..."
            sudo pm2 restart 0

            echo "✅ Despliegue completado exitosamente."
            # --- Fin del script en el servidor remoto ---
          EOSSH
